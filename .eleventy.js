/**
 *
 *
 * IMPORTS
 */
const highlight = require("@11ty/eleventy-plugin-syntaxhighlight");
const rss = require("@11ty/eleventy-plugin-rss");
const lazyImages = require("eleventy-plugin-lazyimages");
const md = require("markdown-it");
const mdClass = require("@toycode/markdown-it-class");
const moment = require("moment");
const CleanCSS = require("clean-css");
const { join } = require("path");

/**
 *
 *
 * CONSTANTS
 */

// Make dates look like "April 5th, 1993"
const dateFormat = "MMMM Do, YYYY";
// Markdown-it options
const mdOptions = {
    // Allow HTML inline in markdown
    html: true,
    // Smart quotes, symbols, em dashes, etc.
    typographer: true,
    // Allows closing tags with single /
    xhtmlOut: false,
};
// Add classes to elements generated by markdown
const mdClassOptions = {
    p: "f5 mb3 lh-copy banana-black",
    ul: "f5 mb4 lh-copy o-90",
    h2: "mt5",
    a: "black link underline hover-bg-black-90 hover-yellow",
    img: "lazy-load",
};

// Style tags with classes

/**
 *
 *
 * FUNCTIONS / FILTERS / ETC
 */

/**
 * A shortcode that takes an image, a caption, and optionally some alt text
 * and spits out a figure element. If alt text is ommitted, it is set to the caption.
 * https://gist.github.com/dirtystylus/d488ea82fec9ebda8308a288015d019b
 * @param {string} image
 * @param {string} caption
 * @param {string?} altText
 * @returns string
 */
const figureShortcode = (image, caption, altText) => {
    const alt = altText ? altText : caption;
    const captionMarkup = caption
        ? `<figcaption class="f6 mt2 i tc db">${caption}</figcaption>`
        : "";
    return `<figure class="mt4 mb4 mh0">
            <a href="${image}">
                <img class="lazy img ba bw1 b--black br1 w-100 h-auto" src="${image}" alt="${alt}"/>
                <noscript>
                    <img class="img ba bw1 b--black br1 w-100 h-auto" src="${image}" alt="${alt}"/>
                </noscript>
            </a>
            ${captionMarkup}
        </figure>`;
};

module.exports = function (eleventyConfig) {
    // md (to html) and images get copied into the destination folder
    eleventyConfig.setTemplateFormats(["md", "png", "jpg", "njk"]);

    // Export an rss feed
    eleventyConfig.addPlugin(rss);

    // Lazy load images
    eleventyConfig.addPlugin(lazyImages, {
        // Let's mean it
        imgSelector: ".lazy",
        // We put the init script in _includes/partials/scripts.njk
        appendInitScript: false,
        // This plugin thinks that paths in generated files are
        // relative to this file (.eleventy.js), so we have to let it
        // know that they're actually relative to the `articles`
        // directory.
        transformImgPath: (imgPath) => {
            return join("./articles", imgPath);
        },
    });

    // BUILD-TIME SYNTAX HIGHLIGHTING WOOOO
    eleventyConfig.addPlugin(highlight);

    // Grab the CSS from the root and put it in the output
    eleventyConfig.addPassthroughCopy("css");

    // Minify our CSS
    eleventyConfig.addFilter("cssmin", function (code) {
        return new CleanCSS({}).minify(code).styles;
    });

    // Format our dates like "April 5th, 1993"
    eleventyConfig.addFilter("formatDate", function (date) {
        return moment(date).format(dateFormat);
    });

    // Figure shortcodes for Nice Imagesâ„¢.
    eleventyConfig.addShortcode("figure", figureShortcode);

    // Let us set classes on the elements that the markdown generator
    eleventyConfig.setLibrary("md", md(mdOptions).use(mdClass, mdClassOptions));

    return {
        passthroughFileCopy: true,
        dir: {
            input: "articles",
            output: "dist",
            includes: "_includes",
        },
    };
};
